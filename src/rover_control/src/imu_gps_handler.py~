#!/usr/bin/env python
# -*- coding: utf-8 -*-


import math
from math import radians, cos, sin, asin, sqrt, pow, pi, atan2
import rospy
import tf
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3, PoseWithCovarianceStamped
from std_msgs.msg import String
from sensor_msgs.msg import NavSatFix, Imu
from geographic_msgs.msg import WayPoint, GeoPoint
from rover_control.msg import Distancewithangle




class Sensor_Handler(object):
    
    def bearing(self,latCur, lonCur, latWP, lonWP): #Bearing to waypoint (degrees)
        latWP, lonWP, latCur, lonCur = map(radians, [latWP, lonWP, latCur, lonCur]) #Convert into Radians to perform math
        dLon = lonWP - lonCur

        return atan2(sin(dLon) * cos(latWP), cos(latCur) * sin(latWP) - (sin(latCur) * cos(latWP) * cos(dLon)))

    def haversineDistance(self,latCur, lonCur, latWP, lonWP): 

        latWP, lonWP, latCur, lonCur = map(radians, [latWP, lonWP, latCur, lonCur]) #Convert into Radians to perform math
        a = pow(sin((latWP - latCur)/2),2) + cos(latCur) * cos(latWP) * pow(sin((lonWP - lonCur)/2),2)
        return self.earthRadius * 2.0 * asin(sqrt(a))  #Return calculated distance to waypoint in Metres
    def callback_odom(self,data):
        self.Xstr=str(data.pose.pose.position.x)
        self.Ystr=str(data.pose.pose.position.y)
        if(self.Xstr != ''and  self.flag==1):
        	self.send_msgs.currPosY=self.Ystr
        	self.send_msgs.currPosX=self.Xstr 
		self.flag=0
                rospy.loginfo(self.send_msgs.currPosY)
       	
                

    def __init__(self):
        rospy.init_node('imu_gps_handler')
        self.pub= rospy.Publisher('/distancewithangle', Distancewithangle, queue_size = 50)
        self.gps_pub = rospy.Publisher('/gps/fix', NavSatFix, queue_size = 50)
        self.imu_pub = rospy.Publisher('/imu/data', Imu, queue_size = 50)
        self.waypoint_pub = rospy.Publisher('/waypoint', WayPoint, queue_size = 50)
        self.odom_combined_pub = rospy.Publisher('/odom_combined', PoseWithCovarianceStamped,queue_size = 50)
        self.flag=1
        self.take_sensor_data()

    def take_sensor_data(self):
        rate = rospy.Rate(10) # 10hz
         
        while not rospy.is_shutdown():
            self.earthRadius = 6371000.0 #Metres

            self.current_time = rospy.Time.now()

            self.odom = Odometry()
            self.odom.header.stamp = self.current_time
            self.odom.header.frame_id = "odom"

            self.gps_fix = NavSatFix()
            self.gps_fix.header.frame_id = "base_link"
            self.gps_fix.header.stamp = self.odom.header.stamp
            self.gps_fix.status.status = 0 # GPS FIXED
            self.gps_fix.status.service = 1 # GPS SERVICE = GPS
            # Buralar bizden gelecek
            self.gps_fix.latitude =  float(41.105581)
            self.gps_fix.longitude = float(29.022692)
            self.gps_fix.altitude = 0
            self.gps_fix.position_covariance = [0,0,0,0,0,0,0,0,0]
            self.gps_fix.position_covariance_type = 0

            
            self.waypoint = WayPoint()
            self.waypoint.position.latitude = 41.104747
            self.waypoint.position.longitude = 29.022931
            self.waypoint.position.altitude = 0
       

            self.imuMsg = Imu()
            self.imuMsg.orientation_covariance = [0 , 0 , 0, 0, 0, 0, 0, 0, 0]
            self.imuMsg.angular_velocity_covariance = [0, 0 , 0, 0 , 0, 0, 0 , 0 , 0]
            self.imuMsg.linear_acceleration_covariance = [0 , 0 , 0, 0 , 0, 0, 0 , 0 , 0]
            
            self.roll = 0
            self.pitch = 0
            self.yaw =0

            # Acceloremeter
            self.imuMsg.linear_acceleration.x = 0
            self.imuMsg.linear_acceleration.y = 0
            self.imuMsg.linear_acceleration.z = 0

            # Gyro
            self.imuMsg.angular_velocity.x = 0
            self.imuMsg.angular_velocity.y = 0
            self.imuMsg.angular_velocity.z = 0

            self.q = tf.transformations.quaternion_from_euler(self.roll,self.pitch,self.yaw)
            self.imuMsg.orientation.x = self.q[0] #magnetometer
            self.imuMsg.orientation.y = self.q[1]
            self.imuMsg.orientation.z = self.q[2]
            self.imuMsg.orientation.w = self.q[3]

            self.imuMsg.header.frame_id = "base_link"
            self.imuMsg.header.stamp = self.odom.header.stamp

            self.pwcs = PoseWithCovarianceStamped()
            self.pwcs.header.stamp = self.odom.header.stamp
            self.pwcs.header.frame_id = "odom"
            self.pwcs.pose.pose = self.odom.pose.pose
            self.last_time = self.current_time
            

            self.lonCur= self.gps_fix.longitude
            self.latCur= self.gps_fix.latitude

            self.latWP=self.waypoint.position.latitude
            self.lonWP=self.waypoint.position.longitude

            self.haversineDistance(self.latCur,self.lonCur,self.latWP,self.lonWP)
            self.bearing(self.latCur,self.lonCur,self.latWP,self.lonWP)

            rospy.Subscriber('/husky_velocity_controller/odom', Odometry ,self.callback_odom)
            


            self.send_msgs=Distancewithangle()
            self.send_msgs.distance=str(self.haversineDistance(self.latCur, self.lonCur, self.latWP, self.lonWP))
            self.send_msgs.angle=str(self.bearing(self.latCur, self.lonCur, self.latWP, self.lonWP))
            rospy.loginfo(self.send_msgs.currPosX)

            if(self.send_msgs.currPosX != ''):
                self.pub.publish(self.send_msgs)
               

            self.odom_combined_pub.publish(self.pwcs)
            self.gps_pub.publish(self.gps_fix)
            self.waypoint_pub.publish(self.waypoint)  
            self.imu_pub.publish(self.imuMsg) 

   

  

         
if __name__ == '__main__':
    Sensor_Handler()
