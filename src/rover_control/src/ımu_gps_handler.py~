#!/usr/bin/env python
# -*- coding: utf-8 -*-


import math
from math import sin,cos, pi
import rospy
import tf
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3
from std_msgs.msg import String
from sensor_msgs.msg import NavSatFix, Imu
from geographic_msgs.msg import WayPoint, GeoPoint


class VelocityController(object):
    def __init__(self):
        rospy.init_node('imu_gps_handler')
        self.gps_pub = rospy.Publisher('/gps/fix', NavSatFix, queue_size = 50)
        self.imu_pub = rospy.Publisher('/imu/data', Imu, queue_size = 50)
        self.waypoint_pub = rospy.Publisher('/waypoint', WayPoint, queue_size = 50)
        self.odom_combined_pub = rospy.Publisher('/odom_combined', PoseWithCovarianceStamped,queue_size = 50
        self.sensor_data()
   

    def sensor_data(self):
        rate = rospy.Rate(10) # 10hz

        while not rospy.is_shutdown():

           self.gps_fix = NavSatFix()
            self.gps_fix.header.frame_id = "base_link"
            self.gps_fix.header.stamp = self.odom.header.stamp
            self.gps_fix.status.status = 0 # GPS FIXED
            self.gps_fix.status.service = 1 # GPS SERVICE = GPS
            # Buralar bizden gelecek
            self.gps_fix.latitude =  float(41.24600)
            self.gps_fix.longitude = float(29.392400)
            self.gps_fix.altitude = 0
            self.gps_fix.position_covariance = [0,0,0,0,0,0,0,0,0]
            self.gps_fix.position_covariance_type = 0

            
            self.waypoint = WayPoint()
            self.waypoint.position.latitude = 40.84600
            self.waypoint.position.longitude = 29.392400
            self.waypoint.position.altitude = 0
       

            self.imuMsg = Imu()
            self.imuMsg.orientation_covariance = [0 , 0 , 0, 0, 0, 0, 0, 0, 0]
            self.imuMsg.angular_velocity_covariance = [0, 0 , 0, 0 , 0, 0, 0 , 0 , 0]
            self.imuMsg.linear_acceleration_covariance = [0 , 0 , 0, 0 , 0, 0, 0 , 0 , 0]
            
            self.roll = 0
            self.pitch = 0
            self.yaw = self.th

            # Acceloremeter
            self.imuMsg.linear_acceleration.x = 0
            self.imuMsg.linear_acceleration.y = 0
            self.imuMsg.linear_acceleration.z = 0

            # Gyro
            self.imuMsg.angular_velocity.x = 0
            self.imuMsg.angular_velocity.y = 0
            self.imuMsg.angular_velocity.z = 0

            self.q = tf.transformations.quaternion_from_euler(self.roll,self.pitch,self.yaw)
            self.imuMsg.orientation.x = self.q[0] #magnetometer
            self.imuMsg.orientation.y = self.q[1]
            self.imuMsg.orientation.z = self.q[2]
            self.imuMsg.orientation.w = self.q[3]

            self.imuMsg.header.frame_id = "base_link"
            self.imuMsg.header.stamp = self.odom.header.stamp

            self.pwcs = PoseWithCovarianceStamped()
            self.pwcs.header.stamp = self.odom.header.stamp
            self.pwcs.header.frame_id = "odom"
            self.pwcs.pose.pose = self.odom.pose.pose
            self.last_time = self.current_time
         

           

if __name__ == '__main__':
    VelocityController()
