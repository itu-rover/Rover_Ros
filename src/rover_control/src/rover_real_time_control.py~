#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
from math import sin,cos, pi
import rospy
import tf
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3
from std_msgs.msg import String
from sensor_msgs.msg import NavSatFix, Imu
from geographic_msgs.msg import WayPoint, GeoPoint



class VelocityController(object):
    def __init__(self):
        rospy.init_node('rover_simulator_garen_controller')


        self.x = 0.0
        self.y = 0.0
        self.th = 0.0

        self.vx = 0
        self.vy = 0
        self.vth = 0

        self.current_time =  rospy.Time.now()
        self.last_time =  rospy.Time.now()
        
        self.odom_pub = rospy.Publisher('/husky_velocity_controller/odom', Odometry, queue_size = 50)
        self.gps_pub = rospy.Publisher('/gps/fix', NavSatFix, queue_size = 50)
        self.imu_pub = rospy.Publisher('/imu/data', Imu, queue_size = 50)
        self.twist = Twist()
        self.controller()
    

    def callback_cmd(self,data):

        self.twist.linear.x = data.linear.x 
        self.twist.linear.y = data.linear.y 
        self.twist.angular.z = data.angular.z
        if self.twist.angular.z < 0:
            self.angular_way = "0"
            self.rover_angular_speed = -self.twist.angular.z
        else:
            self.angular_way = "1"
            self.rover_angular_speed = self.twist.angular.z

        # Linear Speed
        self.rover_linear_speed = int(self.twist.linear.x*99/0.5)
        if self.rover_linear_speed < 10:
            self.rover_linear_speed_str = "0" + str(self.rover_linear_speed)
        else:
            self.rover_linear_speed_str = str(self.rover_linear_speed)

        # Angular Speed
        self.rover_angular_speed = int(self.rover_angular_speed*99)
        if self.rover_angular_speed < 10:
            self.rover_angular_speed_str = "0" + str(self.rover_angular_speed)
        else:
            self.rover_angular_speed_str = str(self.rover_angular_speed)      
      

    def callback_gps(self,data):
       self.odom.pose.pose = data.pose.pose
       self.x = data.pose.pose.position.x
       self.y = data.pose.pose.position.y

    def controller(self):
        rate = rospy.Rate(10) #10 Hz

        while not rospy.is_shutdown():

            self.th = self.twist.angular.z

            self.current_time = rospy.Time.now()
            self.odom_quat = tf.transformations.quaternion_from_euler(0, 0, self.th)


            self.odom = Odometry()
            self.odom.header.stamp = self.current_time
            self.odom.header.frame_id = "odom"
            self.odom.pose.pose = Pose(Point(self.x, self.y, 0.), Quaternion(*self.odom_quat))
            
            self.gps_fix = NavSatFix()
            self.gps_fix.header.frame_id = "base_link"
            self.gps_fix.header.stamp = self.odom.header.stamp
            self.gps_fix.status.status = 0 # GPS FIXED
            self.gps_fix.status.service = 1 # GPS SERVICE = GPS
            # Buralar bizden gelecek
            self.gps_fix.latitude = float(41.24600) # 41.24600
            self.gps_fix.longitude =float(29.392400)
            self.gps_fix.altitude = 0
            self.gps_fix.position_covariance = [0,0,0,0,0,0,0,0,0]
            self.gps_fix.position_covariance_type = 0

       

            self.imuMsg = Imu()
            self.imuMsg.orientation_covariance = [0 , 0 , 0, 0, 0, 0, 0, 0, 0]
            self.imuMsg.angular_velocity_covariance = [0, 0 , 0, 0 , 0, 0, 0 , 0 , 0]
            self.imuMsg.linear_acceleration_covariance = [0 , 0 , 0, 0 , 0, 0, 0 , 0 , 0]
            
            self.roll = 0
            self.pitch = 0
            #bizden gelecek
            self.yaw = self.th

            # Acceloremeter
            self.imuMsg.linear_acceleration.x = 0
            self.imuMsg.linear_acceleration.y = 0
            self.imuMsg.linear_acceleration.z = 0

            # Gyro
            self.imuMsg.angular_velocity.x = 0
            self.imuMsg.angular_velocity.y = 0
            self.imuMsg.angular_velocity.z = 0

            self.q = tf.transformations.quaternion_from_euler(self.roll,self.pitch,self.yaw)
            self.imuMsg.orientation.x = self.q[0] #magnetometer
            self.imuMsg.orientation.y = self.q[1]
            self.imuMsg.orientation.z = self.q[2]
            self.imuMsg.orientation.w = self.q[3]

            self.imuMsg.header.frame_id = "base_link"
            self.imuMsg.header.stamp = self.odom.header.stamp
         

           
             
            rospy.Subscriber('/husky_velocity_controller/odom', Odometry, self.callback_gps)
            rospy.Subscriber('/husky_velocity_controller/cmd_vel', Twist, self.callback_cmd)
            # Publisher(s)
            self.odom_pub.publish(self.odom) 
            self.gps_pub.publish(self.gps_fix)
            self.imu_pub.publish(self.imuMsg) 
         

            rate.sleep()
             

if __name__ == '__main__':
    VelocityController()
