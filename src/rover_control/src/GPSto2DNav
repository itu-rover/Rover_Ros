#!/usr/bin/env python
# -*- coding: utf-8 -*-


import roslib
import rospy
from math import radians, cos, sin, asin, sqrt, pow, pi, atan2
import numpy as np
from std_msgs.msg import String
from sensor_msgs.msg import NavSatFix
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import PoseWithCovarianceStamped
from geographic_msgs.msg import WayPoint
from rover_control.msg import Distancewithangle

latWP = 0.0
lonWP = 0.0

latCur = 0.0
lonCur = 0.0

earthRadius = 6371000.0 #Metres


WPUpdateState = False

lastValidFixTime = 0.0

gpsValidityTimeout = 10.0 #Seconds

send_msgs=Distancewithangle()

pub= rospy.Publisher('/distancewithangle', Distancewithangle, queue_size = 50)

def callback_waypoint(msg):
	global waypointUpdateState
	global latWP
	global lonWP
	
	latWP = msg.position.latitude
	lonWP = msg.position.longitude
	#rospy.loginfo("Recieved Waypoint Command, Latitude: %f, Longitude: %f", latWP, lonWP)
    

def callback_gps(msg):
   global latCur
   global lonCur
   global latWP
   global lonWP
	  
   latCur = msg.latitude
   lonCur = msg.longitude

   #rospy.loginfo("GPS Fix Available, Latitude: %f, Longitude: %f", latCur, lonCur)
   send_msgs.distance=str(haversineDistance(latCur, lonCur, latWP, lonWP))
   send_msgs.angle=str(bearing(latCur, lonCur, latWP, lonWP))
   pub.publish(send_msgs)

def gpsFixIsValid(): #Check to see if there has been a GPS fix within the last <gpsValidityTimeout> seconds
		global gpsValidityTimeout
		
		if (rospy.get_time()- lastValidFixTime) < gpsValidityTimeout:
			return True
		else:
			rospy.loginfo("GPS Fix Invalid! Last valid update was: %f seconds ago", rospy.get_time()- lastValidFixTime)
			return False		


def haversineDistance(latCur, lonCur, latWP, lonWP): #Returns distance to waypoint in Metres
	latWP, lonWP, latCur, lonCur = map(radians, [latWP, lonWP, latCur, lonCur]) #Convert into Radians to perform math
	a = pow(sin((latWP - latCur)/2),2) + cos(latCur) * cos(latWP) * pow(sin((lonWP - lonCur)/2),2)
	return earthRadius * 2.0 * asin(sqrt(a))  #Return calculated distance to waypoint in Metres

def bearing(latCur, lonCur, latWP, lonWP): #Bearing to waypoint (degrees)
	latWP, lonWP, latCur, lonCur = map(radians, [latWP, lonWP, latCur, lonCur]) #Convert into Radians to perform math
	dLon = lonWP - lonCur

	return atan2(sin(dLon) * cos(latWP), cos(latCur) * sin(latWP) - (sin(latCur) * cos(latWP) * cos(dLon)))

def main():
    rospy.init_node('gps_2d_nav')
    rate = rospy.Rate(0.05) # Every 20 seconds

   

    while not rospy.is_shutdown():
    	rospy.Subscriber("waypoint", WayPoint, callback_waypoint )
    	rospy.Subscriber("gps/fix", NavSatFix, callback_gps)

        rate.sleep()



if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass